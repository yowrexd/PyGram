~ start
if scorchi == "false":
	Dunehopper: Talk with Scorchi first before taking this quiz.
	=> END
Dunehopper: Welcome! Let's test your knowledge about Python inheritance.
Dunehopper: You'll need to answer at least 5 questions correctly to pass.
set score = 0
=> question_one

~ question_one
Dunehopper: What is inheritance in Python?
- A way to copy code between files
	Dunehopper: Not quite! Inheritance is about classes sharing features.
	=> question_two
- A way to import modules
	Dunehopper: Incorrect! Inheritance lets classes inherit from other classes.
	=> question_two
- A way for a class to inherit features from another class
	Dunehopper: Correct! Just like inheriting traits from parents!
	set score = score + 1
	=> question_two

~ question_two
Dunehopper: How do you create a Student class that inherits from Person?
- class Student(Person):
	Dunehopper: Correct! That's exactly how we create a child class!
	set score = score + 1
	=> question_three
- class Person(Student):
	Dunehopper: Incorrect! The child class goes first: class Student(Person)
	=> question_three
- extend Student from Person
	Dunehopper: Not quite! Python uses class Student(Person) syntax.
	=> question_three

~ question_three
Dunehopper: What's the purpose of super().__init__()?
- To create a new instance
	Dunehopper: Incorrect! super() calls the parent class's __init__
	=> question_four
- To delete the parent class
	Dunehopper: Not quite! super() lets us use parent class features.
	=> question_four
- To call the parent class's __init__ method
	Dunehopper: Correct! super() helps us use the parent's initialization!
	set score = score + 1
	=> question_four

~ question_four
Dunehopper: What happens when you add __init__ to a child class?
- It adds to the parent's __init__
	Dunehopper: Incorrect! It actually overrides the parent's __init__
	=> question_five
- It overrides the parent's __init__
	Dunehopper: Correct! The child's __init__ replaces the parent's!
	set score = score + 1
	=> question_five
- Nothing happens
	Dunehopper: Not quite! The child's __init__ overrides the parent's.
	=> question_five

~ question_five
Dunehopper: Can a child class add new methods its parent doesn't have?
- No
	Dunehopper: Incorrect! Child classes can definitely add new methods.
	=> question_six
- Yes
	Dunehopper: Correct! Child classes can add new features!
	set score = score + 1
	=> question_six
- Only if the parent allows it
	Dunehopper: Not quite! Child classes are free to add new methods.
	=> question_six

~ question_six
Dunehopper: What happens to parent class methods in the child class?
- They are inherited and can be used
	Dunehopper: Correct! The child class can use all parent methods!
	set score = score + 1
	=> check_score
- They are deleted
	Dunehopper: Incorrect! Parent methods are inherited by the child.
	=> check_score
- They need to be copied
	Dunehopper: Not quite! Methods are automatically inherited.
	=> check_score

~ check_score
if score >= 5:
	Dunehopper: Congratulations! You got a passing score!
	Dunehopper: You've shown great understanding of Python inheritance!
	Dunehopper: Go to Pebble to advance your study.
	set dunehopper = "true"
	=> END
Dunehopper: You need more practice with inheritance.
Dunehopper: Review the material with Scorchi and try again!
set scorchi = "false"
=> END