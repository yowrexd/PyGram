[gd_resource type="Resource" script_class="Description" load_steps=3 format=3 uid="uid://c85ciq54xpian"]

[ext_resource type="Texture2D" uid="uid://ds37qp0erbr1h" path="res://Gameplay/Inventory Resource/Item Descriptions/ScrollEmpty.png" id="1_cnbnq"]
[ext_resource type="Script" path="res://Gameplay/Inventory Resource/Item Descriptions/description.gd" id="2_763mb"]

[resource]
script = ExtResource("2_763mb")
title = "Sapling Sam's Lesson"
icon = ExtResource("1_cnbnq")
description = "# Advanced Python Control Flow: elif, else, and Complex Conditions

## Introduction to Advanced Conditional Statements

While basic if statements form the foundation of conditional programming, Python provides additional tools for handling complex decision-making scenarios. This chapter explores advanced conditional statements, including elif, else, and various ways to combine and structure conditions.

## The elif Statement

### Understanding elif
The `elif` keyword (short for \"else if\") allows you to check multiple conditions sequentially. It provides an elegant way to handle multiple alternative conditions.

```python
a = 33
b = 33

if b > a:
    print(\"b is greater\")
elif a == b:
    print(\"they're equal\")
```

### Multiple elif Statements
You can chain multiple elif statements to handle various conditions:

```python
score = 85
if score > 90:
    print(\"A grade\")
elif score > 80:
    print(\"B grade\")
elif score > 70:
    print(\"C grade\")
elif score > 60:
    print(\"D grade\")
```

## The else Statement

### Basic Usage
The `else` statement catches any case not handled by the preceding if and elif conditions:

```python
temperature = 25
if temperature > 30:
    print(\"Hot\")
elif temperature > 20:
    print(\"Warm\")
else:
    print(\"Cool\")
```

### Common Patterns
```python
# Simple if-else
age = 20
if age >= 18:
    print(\"Adult\")
else:
    print(\"Minor\")

# Complete if-elif-else
number = 0
if number > 0:
    print(\"Positive\")
elif number < 0:
    print(\"Negative\")
else:
    print(\"Zero\")
```

## Shorthand Syntax

### Ternary Operators
Python offers a concise way to write simple if-else statements in one line:

```python
# Traditional if-else
if score >= 60:
    result = \"Pass\"
else:
    result = \"Fail\"

# Shorthand version
result = \"Pass\" if score >= 60 else \"Fail\"
```

## Logical Operators

### Types of Logical Operators
Python provides three logical operators for combining conditions:

1. **and**: Both conditions must be True
```python
if age > 18 and score > 60:
    print(\"Qualified\")
```

2. **or**: At least one condition must be True
```python
if temperature < 0 or temperature > 100:
    print(\"Extreme temperature!\")
```

3. **not**: Reverses the condition
```python
if not is_valid:
    print(\"Invalid input\")
```

### Complex Conditions
```python
x = 5
y = 10
if x < 10 and y > 5:
    print(\"Both conditions are true!\")
```

## Nested If Statements

### Structure and Usage
You can place if statements inside other if statements to create complex decision trees:

```python
if age > 18:
    if score > 90:
        print(\"Top adult score!\")
    elif score > 70:
        print(\"Good adult score!\")
    else:
        print(\"Adult score needs improvement\")
else:
    if score > 90:
        print(\"Top youth score!\")
    else:
        print(\"Youth score needs improvement\")
```

## Common Mistakes and Best Practices

### Avoiding Common Errors
1. Using assignment instead of comparison
```python
# Wrong
if score = 90:    # This is assignment!
    print(\"Good score\")

# Correct
if score == 90:   # This is comparison
    print(\"Good score\")
```

2. Forgetting proper indentation
3. Missing colons after conditions
4. Using wrong logical operators

### Best Practices
1. Keep conditions simple and readable
2. Use appropriate combination of if, elif, and else
3. Consider using shorthand syntax for simple conditions
4. Properly indent nested statements
5. Use descriptive variable names

## Conclusion

Advanced conditional statements in Python provide powerful tools for handling complex decision-making scenarios. Understanding how to effectively combine if, elif, and else statements, along with logical operators and proper syntax, enables you to write more sophisticated and efficient programs."
