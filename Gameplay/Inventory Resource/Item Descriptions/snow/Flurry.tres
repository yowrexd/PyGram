[gd_resource type="Resource" script_class="Description" load_steps=3 format=3 uid="uid://cdf4ktt0l4ivg"]

[ext_resource type="Texture2D" uid="uid://ds37qp0erbr1h" path="res://Gameplay/Inventory Resource/Item Descriptions/ScrollEmpty.png" id="1_0sldb"]
[ext_resource type="Script" path="res://Gameplay/Inventory Resource/Item Descriptions/description.gd" id="2_0rh0m"]

[resource]
script = ExtResource("2_0rh0m")
title = "Flurry's Lesson"
icon = ExtResource("1_0sldb")
description = "# Python Lists: Working with Collections of Data

## Introduction to Lists

In Python, lists (commonly known as arrays in other programming languages) provide a powerful way to store and manipulate collections of data. Instead of creating multiple individual variables, lists allow you to store multiple values in a single, organized container.

## Creating Lists

### Basic List Creation
The simplest way to create a list is to enclose values in square brackets:

```python
# Instead of multiple variables:
car1 = \"Ford\"
car2 = \"Volvo\"
car3 = \"BMW\"

# Use a single list:
cars = [\"Ford\", \"Volvo\", \"BMW\"]
```

## Accessing List Elements

### Index-Based Access
List elements are accessed using zero-based indexing:

```python
cars = [\"Ford\", \"Volvo\", \"BMW\"]
first_car = cars[0]   # Gets \"Ford\"
second_car = cars[1]  # Gets \"Volvo\"
third_car = cars[2]   # Gets \"BMW\"
```

## Modifying Lists

### Changing Elements
You can modify list elements by accessing their index:

```python
cars = [\"Ford\", \"Volvo\", \"BMW\"]
cars[0] = \"Toyota\"    # List is now [\"Toyota\", \"Volvo\", \"BMW\"]
```

### Adding Elements
The `append()` method adds elements to the end of a list:

```python
cars = [\"Ford\", \"Volvo\", \"BMW\"]
cars.append(\"Honda\")  # List becomes [\"Ford\", \"Volvo\", \"BMW\", \"Honda\"]
```

### Removing Elements
Python provides multiple ways to remove list elements:

```python
cars = [\"Ford\", \"Volvo\", \"BMW\", \"Honda\"]

# Remove by index
cars.pop(1)      # Removes \"Volvo\"

# Remove by value
cars.remove(\"BMW\")
```

## List Operations

### Common List Methods
Python lists include several built-in methods for manipulation:

```python
cars = [\"Ford\", \"Volvo\", \"BMW\"]

# Get list length
length = len(cars)    # Returns 3

# Sort the list
cars.sort()          # Arranges alphabetically

# Reverse the list
cars.reverse()       # Reverses the current order
```

## Iterating Through Lists

### Using For Loops
Python makes it easy to iterate through list elements:

```python
cars = [\"Toyota\", \"Honda\", \"Ford\"]
for car in cars:
    print(car)
```

### Combining Operations
Here's a comprehensive example combining multiple list operations:

```python
# Initialize list
cars = [\"Toyota\", \"Honda\", \"Ford\"]

# Add a new car
cars.append(\"BMW\")

# Sort alphabetically
cars.sort()

# Print with formatting
for car in cars:
    print(\"I love my \" + car)
```

## Best Practices

When working with lists:
1. Use descriptive list names that indicate content
2. Keep lists organized (sort when appropriate)
3. Be careful with index numbers to avoid errors
4. Consider using list methods instead of manual operations
5. Test list operations in small steps

## Common Operations Reference


| append() | Add element to end | 
| pop(i) | Remove element at index i |
| remove() | Remove specific element |
| sort() | Sort the list |
| reverse() | Reverse the list |
| len() | Get list length |

## Conclusion

Lists are fundamental data structures in Python that provide flexible and powerful ways to work with collections of data. Understanding how to create, modify, and manipulate lists is essential for effective Python programming. Regular practice with these concepts will help build proficiency in working with Python lists."
