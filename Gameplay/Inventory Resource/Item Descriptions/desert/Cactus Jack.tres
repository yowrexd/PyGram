[gd_resource type="Resource" script_class="Description" load_steps=3 format=3 uid="uid://brwpnmcrmgtdt"]

[ext_resource type="Texture2D" uid="uid://ds37qp0erbr1h" path="res://Gameplay/Inventory Resource/Item Descriptions/ScrollEmpty.png" id="1_fhlcy"]
[ext_resource type="Script" path="res://Gameplay/Inventory Resource/Item Descriptions/description.gd" id="2_c7snu"]

[resource]
script = ExtResource("2_c7snu")
title = "Cactus Jack's Lesson"
icon = ExtResource("1_fhlcy")
description = "# Python Polymorphism: Methods in Multiple Forms

## Introduction to Polymorphism

Polymorphism is a fundamental concept in object-oriented programming that allows methods to take different forms depending on the context. In Python, this means that a single function or method can work with different types of objects in a way that's appropriate for each type. The term \"polymorphism\" literally means \"many forms.\"

## Function Polymorphism

### Built-in Function Example: len()
Python's built-in functions often demonstrate polymorphism by working with different types of objects:

```python
# len() with strings
text = \"Hello World!\"
print(len(text))        # Outputs: 12 (counts characters)

# len() with tuples
mytuple = (\"apple\", \"banana\", \"cherry\")
print(len(mytuple))     # Outputs: 3 (counts items)

# len() with dictionaries
mydict = {
    \"brand\": \"Ford\",
    \"model\": \"Mustang\",
    \"year\": 1964
}
print(len(mydict))      # Outputs: 3 (counts key-value pairs)
```

## Class Polymorphism

### Basic Class Polymorphism
Different classes can have methods with the same name that perform different actions:

```python
class Car:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model
    
    def move(self):
        print(\"Drive!\")

class Boat:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model
    
    def move(self):
        print(\"Sail!\")
```

### Using Polymorphic Classes
You can treat different objects uniformly if they share method names:

```python
# Create objects
car1 = Car(\"Ford\", \"Mustang\")
boat1 = Boat(\"Ibiza\", \"Touring 20\")

# Polymorphic loop
for vehicle in (car1, boat1):
    vehicle.move()  # Each object responds appropriately
```

## Polymorphism with Inheritance

### Base Class Definition
Create a parent class that defines common behavior:

```python
class Vehicle:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model
    
    def move(self):
        print(\"Move!\")
```

### Inherited Polymorphism
Child classes can inherit or override methods:

```python
class Car(Vehicle):
    pass  # Uses parent's move() method

class Boat(Vehicle):
    def move(self):
        print(\"Sail!\")  # Overrides parent's move() method
```

## Complete Implementation Example

Here's a comprehensive example demonstrating polymorphism through inheritance:

```python
class Vehicle:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model
    
    def move(self):
        print(\"Move!\")

class Car(Vehicle):
    pass  # Inherits everything from Vehicle

class Boat(Vehicle):
    def move(self):
        print(\"Sail!\")

# Create objects
car1 = Car(\"Ford\", \"Mustang\")
boat1 = Boat(\"Ibiza\", \"Touring 20\")

# Polymorphic loop demonstrating uniform access
for vehicle in (car1, boat1):
    print(f\"Brand: {vehicle.brand}\")
    print(f\"Model: {vehicle.model}\")
    vehicle.move()  # Each object responds appropriately
```

## Best Practices

When implementing polymorphism:
1. Use clear, descriptive method names
2. Maintain consistent method signatures
3. Document expected behavior
4. Consider interface contracts
5. Use inheritance appropriately
6. Test with different object types

### Example with Best Practices
```python
class Animal:
    \"\"\"Base class for animals with common behaviors.\"\"\"
    
    def __init__(self, name: str):
        self.name = name
    
    def speak(self) -> str:
        \"\"\"Return the animal's sound.\"\"\"
        return \"Some sound\"

class Dog(Animal):
    \"\"\"Specific implementation for dogs.\"\"\"
    
    def speak(self) -> str:
        \"\"\"Return the dog's bark.\"\"\"
        return \"Woof!\"

class Cat(Animal):
    \"\"\"Specific implementation for cats.\"\"\"
    
    def speak(self) -> str:
        \"\"\"Return the cat's meow.\"\"\"
        return \"Meow!\"

def animal_sound(animal: Animal) -> None:
    \"\"\"Polymorphic function that works with any Animal.\"\"\"
    print(f\"{animal.name} says: {animal.speak()}\")
```

## Applications of Polymorphism

Common uses of polymorphism include:
1. Creating flexible APIs
2. Implementing plugin systems
3. Building extensible frameworks
4. Designing abstract base classes
5. Creating interchangeable components

## Conclusion

Polymorphism is a powerful feature in Python that enables more flexible and maintainable code. Whether through function polymorphism, class polymorphism, or inheritance-based polymorphism, this concept allows you to write code that can work with different types of objects in a uniform way while maintaining specific behaviors for each type."
