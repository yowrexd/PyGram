[gd_resource type="Resource" script_class="Description" load_steps=3 format=3 uid="uid://b7hdbraetql48"]

[ext_resource type="Texture2D" uid="uid://ds37qp0erbr1h" path="res://Gameplay/Inventory Resource/Item Descriptions/ScrollEmpty.png" id="1_wr61a"]
[ext_resource type="Script" path="res://Gameplay/Inventory Resource/Item Descriptions/description.gd" id="2_x8d0w"]

[resource]
script = ExtResource("2_x8d0w")
title = "Pebble's Lesson"
icon = ExtResource("1_wr61a")
description = "# Python Iterators: Traversing Data Collections

## Introduction to Iterators

An iterator in Python is an object that contains a countable number of values and allows you to traverse through them. Iterators are fundamental to Python's design, providing a consistent way to access elements in a collection. Think of an iterator as a bookmark that helps keep track of your position in a sequence of data.

## Built-in Iterables

### Basic Iterator Usage
Many Python objects are already iterable. Here's how to work with them:

```python
# Creating an iterator from a tuple
mytuple = (\"apple\", \"banana\", \"cherry\")
myit = iter(mytuple)    # Creates an iterator

# Using next() to traverse
print(next(myit))       # Outputs: \"apple\"
print(next(myit))       # Outputs: \"banana\"
print(next(myit))       # Outputs: \"cherry\"
```

### String Iteration
Even strings can be iterated through character by character:

```python
# Creating an iterator from a string
mystr = \"Python\"
myit = iter(mystr)

print(next(myit))    # Outputs: \"P\"
print(next(myit))    # Outputs: \"y\"
```

## Using For Loops with Iterables

### Simplifying Iteration
For loops provide a more convenient way to work with iterables:

```python
# Iterating through a tuple
for x in (\"apple\", \"banana\", \"cherry\"):
    print(x)

# Iterating through a string
for char in \"Python\":
    print(char)
```

## Creating Custom Iterators

### Basic Iterator Class
To create an iterator, you need to implement two methods: `__iter__()` and `__next__()`:

```python
class MyNumbers:
    def __iter__(self):
        self.a = 1
        return self
    
    def __next__(self):
        x = self.a
        self.a += 1
        return x
```

### Using Custom Iterators
Here's how to use your custom iterator:

```python
# Create and use the iterator
myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))    # Outputs: 1
print(next(myiter))    # Outputs: 2
```

## Preventing Infinite Iteration

### StopIteration
To prevent infinite iteration, raise StopIteration when you want the iteration to end:

```python
class MyNumbers:
    def __iter__(self):
        self.a = 1
        return self
    
    def __next__(self):
        if self.a <= 5:
            x = self.a
            self.a += 1
            return x
        else:
            raise StopIteration
```

## Complete Implementation Example

Here's a comprehensive example demonstrating all iterator concepts:

```python
class MyNumbers:
    def __iter__(self):
        self.a = 1
        return self
    
    def __next__(self):
        if self.a <= 5:
            x = self.a
            self.a += 1
            return x
        else:
            raise StopIteration

# Using the iterator in a for loop
numbers = MyNumbers()
for num in numbers:
    print(num)  # Outputs numbers 1 through 5
```

## Best Practices

When working with iterators:
1. Always implement both `__iter__()` and `__next__()`
2. Use StopIteration to prevent infinite loops
3. Consider memory efficiency when designing iterators
4. Use for loops when possible for cleaner code
5. Document the expected behavior of your iterators

### Example with Best Practices
```python
class NumberRange:
    \"\"\"An iterator that yields numbers within a specified range.\"\"\"
    
    def __init__(self, start: int, end: int):
        \"\"\"Initialize the iterator with start and end values.\"\"\"
        self.start = start
        self.end = end
    
    def __iter__(self):
        \"\"\"Initialize iteration state.\"\"\"
        self.current = self.start
        return self
    
    def __next__(self):
        \"\"\"Return the next value in the range.\"\"\"
        if self.current <= self.end:
            result = self.current
            self.current += 1
            return result
        else:
            raise StopIteration
```

## Common Applications

Iterators are particularly useful for:
1. Processing large data sets efficiently
2. Creating custom sequences
3. Implementing lazy evaluation
4. Working with infinite sequences
5. Memory-efficient data processing

## Conclusion

Python iterators provide a powerful and consistent way to traverse collections of data. Understanding how to create and use iterators is essential for writing efficient Python code, especially when dealing with large data sets or custom sequences. Whether using built-in iterables or creating custom iterators, this pattern is fundamental to Python programming."
